export const data = JSON.parse("{\"key\":\"v-1dbf33c0\",\"path\":\"/%E7%AE%97%E6%B3%95/%E6%A0%91.html\",\"title\":\"树\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"树\",\"summary\":\"简介 一种分层数据的抽象模型 js 中没有树，但是可以用Object和Array构建树 树的常用操作：深度/广度优先遍历,先中后序遍历 深度与广度优先遍历 深度优先遍历 尽可能深的搜索树的分支 深度优先遍历算法口诀： 访问根节点 对根节点的children挨个进行深度优先遍历。 深度优先遍历 dfs 广度优先遍历 先访问离根节点最近的节点 广度优先遍历算法口\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://zfhblog.top/%E7%AE%97%E6%B3%95/%E6%A0%91.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"ZFH's Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"树\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}]]},\"excerpt\":\"\",\"headers\":[{\"level\":2,\"title\":\"简介\",\"slug\":\"简介\",\"link\":\"#简介\",\"children\":[]},{\"level\":2,\"title\":\"深度与广度优先遍历\",\"slug\":\"深度与广度优先遍历\",\"link\":\"#深度与广度优先遍历\",\"children\":[{\"level\":3,\"title\":\"深度优先遍历\",\"slug\":\"深度优先遍历\",\"link\":\"#深度优先遍历\",\"children\":[]},{\"level\":3,\"title\":\"广度优先遍历\",\"slug\":\"广度优先遍历\",\"link\":\"#广度优先遍历\",\"children\":[]}]},{\"level\":2,\"title\":\"二叉树的先中后序遍历\",\"slug\":\"二叉树的先中后序遍历\",\"link\":\"#二叉树的先中后序遍历\",\"children\":[{\"level\":3,\"title\":\"一个普普通通的二叉树\",\"slug\":\"一个普普通通的二叉树\",\"link\":\"#一个普普通通的二叉树\",\"children\":[]},{\"level\":3,\"title\":\"先序遍历算法口诀\",\"slug\":\"先序遍历算法口诀\",\"link\":\"#先序遍历算法口诀\",\"children\":[]},{\"level\":3,\"title\":\"中序遍历算法口诀\",\"slug\":\"中序遍历算法口诀\",\"link\":\"#中序遍历算法口诀\",\"children\":[]},{\"level\":3,\"title\":\"后序遍历算法口诀\",\"slug\":\"后序遍历算法口诀\",\"link\":\"#后序遍历算法口诀\",\"children\":[]},{\"level\":3,\"title\":\"先中后序遍历非递归版\",\"slug\":\"先中后序遍历非递归版\",\"link\":\"#先中后序遍历非递归版\",\"children\":[]}]},{\"level\":2,\"title\":\"LeetCode：144. 二叉树的前序遍历\",\"slug\":\"leetcode-144-二叉树的前序遍历\",\"link\":\"#leetcode-144-二叉树的前序遍历\",\"children\":[]},{\"level\":2,\"title\":\"LeetCode：145. 二叉树的后序遍历\",\"slug\":\"leetcode-145-二叉树的后序遍历\",\"link\":\"#leetcode-145-二叉树的后序遍历\",\"children\":[]},{\"level\":2,\"title\":\"LeetCode：104. 二叉树的最大深度\",\"slug\":\"leetcode-104-二叉树的最大深度\",\"link\":\"#leetcode-104-二叉树的最大深度\",\"children\":[]},{\"level\":2,\"title\":\"LeetCode：111. 二叉树的最小深度\",\"slug\":\"leetcode-111-二叉树的最小深度\",\"link\":\"#leetcode-111-二叉树的最小深度\",\"children\":[]},{\"level\":2,\"title\":\"LeetCode：102. 二叉树的层序遍历\",\"slug\":\"leetcode-102-二叉树的层序遍历\",\"link\":\"#leetcode-102-二叉树的层序遍历\",\"children\":[]},{\"level\":2,\"title\":\"LeetCode：94. 二叉树的中序遍历\",\"slug\":\"leetcode-94-二叉树的中序遍历\",\"link\":\"#leetcode-94-二叉树的中序遍历\",\"children\":[]},{\"level\":2,\"title\":\"LeetCode：112. 路径总和\",\"slug\":\"leetcode-112-路径总和\",\"link\":\"#leetcode-112-路径总和\",\"children\":[]},{\"level\":2,\"title\":\"前端与树：遍历 JSON 的所有节点值\",\"slug\":\"前端与树-遍历-json-的所有节点值\",\"link\":\"#前端与树-遍历-json-的所有节点值\",\"children\":[]}],\"readingTime\":{\"minutes\":8.13,\"words\":2438},\"filePathRelative\":\"算法/树.md\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
